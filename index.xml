<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bartosz Franaszek on Bartosz Franaszek</title>
    <link>https://franaszek.github.io/index.xml</link>
    <description>Recent content in Bartosz Franaszek on Bartosz Franaszek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Bartosz Franaszek</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>zajęcia 14</title>
      <link>https://franaszek.github.io/project/zajecia-14/</link>
      <pubDate>Wed, 14 Jun 2017 10:06:01 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-14/</guid>
      <description>&lt;p&gt;&lt;h1&gt;2017-06-14&lt;/h1&gt;
&lt;h2&gt;Laboratorium&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Zadanie:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Zaproponuj interfejs ImmutableSet&lt;E&gt; reprezentujący niezmienialny zbiór (operacje wstawiania i usuwania mają tworzyć nowy zbiór).  Przygotuj implementację tego interfejsu za pomocą drzew BST (niech wszystkie używane pola będą zadeklarowane jako final, wtedy na pewno struktura będzie niezmienialna).  Niech operacje takie jak size() i isEmpty() działają w czasie stałym.  Zauważ, że gdyby to były drzewa zrównoważone (AVL lub czerwono-czarne), to mielibyśmy niezmienialny zbiór z wszystkimi operacjami w czasie logarytmicznym.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Dla chętnych:&lt;/b&gt; zachęcam do dalszej pracy nad notatnikiem (z poprzedniego labu). Najważniejszym elementem jest wczytywanie/zapisywanie danych w pliku.&lt;/p&gt;

&lt;p&gt;warto poczytać o wzorcach: visitor (pattern), strategy observer, factory, singleton, decorator, adapter. Wszystkie można znaleźć &lt;a href=&#34;http://wikipedia.org&#34;&gt;tutaj&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Ćwiczenia&lt;/h2&gt;

&lt;p&gt;Lista z filtrowaniem (sito arystotelesa)&lt;/p&gt;

&lt;p&gt;Graf na kolekcji&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 13 - strumienie</title>
      <link>https://franaszek.github.io/project/zajecia-13/</link>
      <pubDate>Tue, 06 Jun 2017 15:41:13 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-13/</guid>
      <description>&lt;p&gt;&lt;h1&gt;2017-06-07&lt;/h1&gt;
&lt;h2&gt;Laboratorium&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;JavaFX&lt;/b&gt;
Zrób prostą aplikację w JavaFX w eclipse, idea lub w netbeans.&lt;/p&gt;

&lt;p&gt;Eclipse: plugin możesz znaleźć &lt;a href=&#34;https://marketplace.eclipse.org/content/efxclipse&#34;&gt;tutaj&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jak to zrobić w NetBeans, można znaleźć w treści zadania domowego.&lt;/p&gt;

&lt;p&gt;W Idei tutorial można znaleźć &lt;a href=&#34;https://www.jetbrains.com/help/idea/2017.1/preparing-for-javafx-application-development.html#create_project_from_scratch&#34;&gt;tutaj.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dla chętnych: &lt;a href=&#34;http://wazniak.mimuw.edu.pl/index.php?title=PO_Strumienie_-_%C4%87wiczenia&#34;&gt;ćwiczenia ze strumieni.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Proszę wykonajcie tutorial (co najmniej pierwszy) z tej &lt;a href=&#34;http://docs.oracle.com/javafx/2/get_started/jfxpub-get_started.htm&#34;&gt;strony&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Zadanie:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Napisz aplikację, która otworzy i wypisze plik w okienku. (nazwa pliku podana jako argument startowy).&lt;/p&gt;

&lt;p&gt;Dla chętnych: Napisz &lt;b&gt;notatnik&lt;/b&gt;, która otworzy i wypisze (jak wyżej) ale pozwoli też edytować i zapisać nowy tekst w tym samym pliku.
&lt;hr /&gt;
&lt;h2&gt;Ćwiczenia&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Przygotowanie do egzaminu.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 12 - Kolekcje</title>
      <link>https://franaszek.github.io/project/zajecia-12/</link>
      <pubDate>Wed, 31 May 2017 10:42:32 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-12/</guid>
      <description>&lt;p&gt;&lt;h1&gt;2017-05-31&lt;/h1&gt;
&lt;h2&gt;Laboratorium&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Obejrzymy &lt;a href=&#34;https://codility.com/demo/take-sample-test/&#34;&gt;Codility&lt;/a&gt; i spróbujemy wykonać test (dla chętnych, z możliwością punktowania)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Zadanie:&lt;/b&gt; Zaimplementuj graf, w którego wierzchołkach przechowywane są napisy. Graf powinien udostępniać operację obchodzenia wszerz i w głąb (z wypisywaniem kolejnych odwiedzonych wierzchołków). Jakiej kolekcji użyjesz w tym celu?&lt;/p&gt;

&lt;p&gt;&lt;small&gt;
Wskazówka - Do przechowania całego grafu warto wykorzystać TreeMap&lt;E&gt;, zaś do pamiętania sąsiadów TreeSet&lt;E&gt;.  Należy także zdefiniować klasę Wierzchołek ze stosownymi operacjami.
&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Zadanie:&lt;/b&gt; Zaproponuj interfejs ImmutableSet&lt;E&gt; reprezentujący niezmienialny zbiór (operacje wstawiania i usuwania mają tworzyć nowy zbiór).  Przygotuj implementację tego interfejsu za pomocą drzew BST (niech wszystkie używane pola będą zadeklarowane jako final, wtedy na pewno struktura będzie niezmienialna).  Niech operacje takie jak size() i isEmpty() działają w czasie stałym.  Zauważ, że gdyby to były drzewa zrównoważone (AVL lub czerwono-czarne), to mielibyśmy niezmienialny zbiór z wszystkimi operacjami w czasie logarytmicznym.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;h2&gt;Ćwiczenia&lt;/h2&gt;
Dla danego grafu, chcemy podzielić jego wierzchołki na możliwie najwięcej niepustych zbiorów, tak by  ten podział miał tę własność, że każda para wierzchołków należących do różnych zbiorów jest połączona krawędzią.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 11 - kolekcje</title>
      <link>https://franaszek.github.io/project/zajecia-11/</link>
      <pubDate>Fri, 19 May 2017 15:08:20 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-11/</guid>
      <description>&lt;p&gt;&lt;h1&gt;2017-05-24&lt;/h1&gt;
&lt;h2&gt;Laboratorium&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Książka telefoniczna.&lt;/p&gt;

&lt;p&gt;Zaimplementuj klasę PhoneBook, która będzie posiadać kolekcję kontaktów (Contact), a każdy kontakt będzie posiadał kolekcję telefonów (Phone).&lt;/p&gt;

&lt;p&gt;Wyróżniamy dwa rodzaje telefonów: PrivatePhone oraz BusinessPhone.&lt;/p&gt;

&lt;p&gt;Klasy mają (co najmniej) następujące atrybuty i metody:&lt;/p&gt;

&lt;pre&gt;
abstract class Phone implements Comparable{

    Phone(String phoneNumber, Contact contact){...}
    
    abstract toString(); // zwróci: “imię nazwisko, tel +48 123456789, [Prywatny|Biznesowy]

    abstract int compareTo(Phone phone) {..}
}

class Contact {
    private Collection&lt;Phone&gt; phoneNumbers; //kolekcja wszystkich prywatnych i biznesowych numerów
private String firstName;
private String sureName;
}

class PhoneBook {
    public static void main(String… args) {..}
    public void printAllNumbers() // metoda wypisze listę wszystkich telefonów z książki adresowej, 
                                  //posortowanej po nazwisku, imieniu (z uwzględnieniem polskich znaków), 
                                  //a następnie po private/business, i na końcu po numerze.
}

&lt;/pre&gt;

&lt;p&gt;Zadanie do oddania na zajęciach, 24 lub 31 maja. na 1 pkt.&lt;/p&gt;

&lt;p&gt;Do porównania z uwzględnieniem polskich znaków: &lt;a href=&#34;http://lmgtfy.com/?q=collator+in+java&#34;&gt;Collator&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Ćwiczenia&lt;/h2&gt;

&lt;p&gt;klasa &lt;pre&gt;Zbiór&amp;lt;T&amp;gt;&lt;/pre&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 10 - Wyjątki/generyki</title>
      <link>https://franaszek.github.io/project/zajecia-10/</link>
      <pubDate>Wed, 17 May 2017 09:38:18 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-10/</guid>
      <description>&lt;p&gt;&lt;h1&gt;2017-05-17&lt;/h1&gt;
&lt;h2&gt;Laboratorium&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Dzisiaj robimy zadania 1 i 2 z &lt;a href=&#34;http://wazniak.mimuw.edu.pl/index.php?title=PO_Wyj%C4%85tki_c.d._-_%C4%87wiczenia&#34;&gt;Ważniaka&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Następnie, zaimplementujmy klasę Para&amp;lt;T1, T2&amp;gt;, która będzie posiadać konstuktor oraz gettery.&lt;/p&gt;

&lt;p&gt;Wykorzystamy klasę Para do własnej implementacji mapy, która zawsze będzie posortowana po kluczu, oraz będzie miała operacje:
&lt;pre&gt;
    void put(T1 key, T2 value);
&lt;/pre&gt;
&lt;pre&gt;
    T2 get(T1 key);
&lt;/pre&gt;
&lt;pre&gt;
    void print() // wypisze zawartość mapy w postaci: [key1-&amp;gt;value1, key2-&amp;gt;value2,&amp;hellip;]
&lt;/pre&gt;
&lt;hr /&gt;&lt;/p&gt;

&lt;h2&gt;Ćwiczenia&lt;/h2&gt;

&lt;p&gt;Zadania: Przestrzeń liniowa nad ciałem K&lt;/p&gt;

&lt;p&gt;Implementacja BST&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 9 - wyjątki</title>
      <link>https://franaszek.github.io/project/zajecia-9/</link>
      <pubDate>Tue, 09 May 2017 14:39:36 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-9/</guid>
      <description>&lt;p&gt;&lt;h1&gt;2017-05-10&lt;/h1&gt;
&lt;h2&gt;Laboratorium&lt;/h2&gt;
&lt;b&gt;Zadanie&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Zaimplementuj interfejsy:
&lt;pre&gt;
Generator
    int daj(); //daje kolejną wartość
&lt;/pre&gt;
&lt;pre&gt;
Filtr
    void weź(int i);
&lt;/pre&gt;
&lt;pre&gt;
Wypisywacz
    void wypisz();
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;A następnie klasy implementujące:&lt;/p&gt;

&lt;p&gt;Generator Naturalny, który daje kolejne liczby naturalne.&lt;/p&gt;

&lt;p&gt;Generator Czytelnik, który wczytuje kolejne liczby z wejścia.&lt;/p&gt;

&lt;p&gt;Generator Losowy, który losuje kolejne liczby.&lt;/p&gt;

&lt;p&gt;Filtr Porównywacz: jak dostaje mniejszą liczbę od swojej, to zapamiętuje, a starą posyła do następnego filtra. jak dostaje większą-równą, to posyła dalej.
ZaślepkaP: dostaje liczbę, tworzy nowy Filtr Porównywacz z tą liczbą.&lt;/p&gt;

&lt;p&gt;Filtr Dzielnik: jak nowa liczba jest wielokrotnością własnej, to nic nie robi, wpp przesyła dalej.&lt;/p&gt;

&lt;p&gt;ZaślepkaD: dostaje liczbę, tworzy nowy Filtr Dzielnik z tą liczbą.&lt;/p&gt;

&lt;p&gt;Następnie zbuduj zestaw generator-filtr zaślepka do posortowania liczb, albo wygenerowania zestawu liczb pierwszych.&lt;/p&gt;

&lt;p&gt;Filtry muszą implementować Wypisywacz, ale zaślepki już nie muszą.&lt;/p&gt;

&lt;p&gt;Dodatkowo, zaimplementuj metodę, która dostaje generator i filtr (nie wie jaki) i wypisze wynik wielokrotnego zastosowania &amp;lsquo;daj&amp;rsquo;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Ćwiczenia&lt;/h2&gt;

&lt;p&gt;Zadanie ONP.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Pojawiło się zadanie laboratoryjne. Proszę gotowe rozwiązania zamieszczać w &lt;a href=&#34;https://drive.google.com/drive/folders/0B9OvVI7-iiR2U2hUWnlJT04zdDg&#34;&gt;tym folderze&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 8</title>
      <link>https://franaszek.github.io/project/zajecia-8/</link>
      <pubDate>Mon, 24 Apr 2017 15:28:14 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-8/</guid>
      <description>&lt;p&gt;&lt;h1&gt;2017-04-26&lt;/h1&gt;
&lt;h2&gt;Laboratorium&lt;/h2&gt;
&lt;b&gt;Zadanie&lt;/b&gt; Hierarchia wyrażeń logicznych&lt;/p&gt;

&lt;p&gt;Napisz hierarchię wyrażeń logicznych (analogiczne do wyrażeń arytmetycznych)&lt;/p&gt;

&lt;p&gt;stałe: True, False&lt;/p&gt;

&lt;p&gt;zmienna: X&lt;/p&gt;

&lt;p&gt;operatory 2-argumentowe: and, or, xor, &amp;hellip;&lt;/p&gt;

&lt;p&gt;operator 1-argumentowy: not, ?&lt;/p&gt;

&lt;p&gt;Operacje:
&lt;pre&gt;
public void printOut();
public boolean countForValue(boolean x); //również wypisze wartość na konsolę.
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Uwaga&lt;/b&gt; Zadanie za jeden punkt. Kto skończy na Laboratorium, ten od razu zgarnie, kto nie skończy, ten zgarnie na kolejnych zajęciach.&lt;/p&gt;

&lt;hr/&gt;

&lt;h2&gt;Ćwiczenia&lt;/h2&gt;

&lt;p&gt;Gra w Blackjacka (nasze Oczko, czy Dwadzieścia-jeden) jest grą karcianą, polegającą na zbieraniu kart tak, by uzbierać więcej oczek na kartach niż rywale, ale nie więcej niż 21. Dokładne reguły gry bywają różne, my przyjmiemy w tym zadaniu pewne ich uproszczenie.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;h2&gt;Praca domowa: Sklep 2&lt;/h2&gt;
&lt;b&gt;Za dwa punkty&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Do naszej aktualnej implementacji należy dodać rozszeżenie: dostawca. Od teraz, włączając sklep, będzie można wpisać &amp;ldquo;end&amp;rdquo; - zakończy program, lub wybrać jeden z dwóch trybów, odpowiednio, za pomocą komend: &amp;ldquo;klient&amp;rdquo;, aby wejść w tryb klienta, i tam bez większych zmian, lub &amp;ldquo;dostawca&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;W przypadku wpisania innego polecenia niż klient/dostawca/end, program ma wyrzucić elegancki wyjątek (własny).&lt;/p&gt;

&lt;p&gt;Po wybraniu trybu &amp;ldquo;dostawca&amp;rdquo;, za pomocą poleceń można dodawać produkty do sklepu:
&lt;pre&gt;
dostarcz pomidory na_wage 10 1000
&lt;/pre&gt;
gdzie &amp;ldquo;pomidory&amp;rdquo; to nazwa produktu, &amp;ldquo;10&amp;rdquo; to cena, a &amp;ldquo;1000&amp;rdquo; to ilość, lub:
&lt;pre&gt;
dostarcz laptop na_sztuki 3999 100
&lt;/pre&gt;
gdzie &amp;ldquo;laptop&amp;rdquo; to nazwa, &amp;ldquo;3999&amp;rdquo; to cena, a &amp;ldquo;100&amp;rdquo; to liczba sztuk.&lt;/p&gt;

&lt;p&gt;Proszę zwróćcie uwagę na polecenia &amp;ldquo;na_wage&amp;rdquo; oraz &amp;ldquo;na_sztuki&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;operacja &amp;ldquo;end&amp;rdquo; pozwala wrócić do wyboru klient/dostawca.&lt;/p&gt;

&lt;p&gt;W trybie &amp;ldquo;klient&amp;rdquo; można wykonać polecenie &amp;ldquo;wypisz&amp;rdquo; które wypisuje stan sklepu (nazwa produktu, pisana małymi literami, data (i godzina z sekundami) dodania produktu, ilość/liczba oraz cena, np:&lt;/p&gt;

&lt;pre&gt;
Pomidory, dodane 2017.04.26 23:14:23, ilość: 1000kg, cena za kilogram: 10zł
Laptop, dodane 2017.04.26 23:14:45, liczba: 100, cena za sztukę: 3999zł
&lt;/pre&gt;

&lt;p&gt;Następnie opracja &amp;ldquo;kup&amp;rdquo;, jak poprzednio (ale mogę pisać wielką bądź małą literą, a nazwy mogą mieć spację) oraz operacja &amp;ldquo;end&amp;rdquo; która pozwala wrócić do trybu wyboru dostawca/klient.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; uwagi&lt;/b&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Jeżeli klient wejdzie do sklepu przed dostawcą, to sklep jest pusty.&lt;/li&gt;
&lt;li&gt;Nazwy produktów można pisać małą lub wielką literą. Nazwy produktów mogą zawierać spacje!&lt;/li&gt;
&lt;li&gt;Proszę zadbać o to, aby w programach nie było polskich znaków (nigdzie) i aby programy były w UTF-8.&lt;/li&gt;
&lt;li&gt;Rozwiązania należy umieścić w tym samym folderze co ostatnio, lecz pod nazwą
&lt;pre&gt;
sklep2_(inicjały i numer indeksu).zip
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;tak jak ostatnio w paczce ma być projekt oraz wygenerowany JAR.&lt;/li&gt;
&lt;li&gt;termin oddania: &lt;b&gt;2017-05-14&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 7</title>
      <link>https://franaszek.github.io/project/zajecia-7/</link>
      <pubDate>Tue, 11 Apr 2017 14:47:08 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-7/</guid>
      <description>&lt;h1&gt;UWAGA: w dniu 2017-04-12 laboratoria nie odbędą się!&lt;/h1&gt;

&lt;h2&gt;Ćwiczenia (odbędą się, standardowo w sali 3160)&lt;/h2&gt;

&lt;p&gt;Zakończymy przykład na wielomiany.&lt;/p&gt;

&lt;p&gt;Rozwiążemy zadania przygotowawcze do kolokwium. Stare kolokwia można znaleźć &lt;a href=&#34;https://moodle.mimuw.edu.pl/course/view.php?id=14#section-20&#34;&gt;tutaj&lt;/a&gt;. Warto również zapoznać się z &lt;a href=&#34;https://moodle.mimuw.edu.pl/mod/page/view.php?id=635&#34;&gt;tym&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 6</title>
      <link>https://franaszek.github.io/project/zajecia-6/</link>
      <pubDate>Tue, 04 Apr 2017 22:34:56 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-6/</guid>
      <description>&lt;h2&gt;2017-08-22&lt;/h2&gt;

&lt;h2&gt;Laboratorium&lt;/h2&gt;

&lt;p&gt;JVM, JRE, JDK?&lt;/p&gt;

&lt;p&gt;Zadanie: klasa Konto.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;SKLEP&lt;/h3&gt;

&lt;p&gt;Napisz Program “sklep.jar”, który będzie umożliwiał zakupy (standard in/out) wybranych produktów (z co najmniej dziesięciu). Produkty dzielą się na dwa rodzaje: produkty na sztuki i produkty na wagę.&lt;/p&gt;

&lt;p&gt;Program po uruchomieniu za pomocą
&lt;pre&gt;java -jar sklep.jar&lt;/pre&gt;
przedstawi się, wypisze bieżącą datę i godzinę oraz listę produktów wraz z dostępnością oraz ceną, np.:&lt;/p&gt;

&lt;p&gt;Pomidory, cena: 9,99zł/kg, dostępne 200kg&lt;/p&gt;

&lt;p&gt;Kawa ziarnista, opakowanie 0,5kg, cena: 41,99zł, dostępne 16 sztuk.&lt;/p&gt;

&lt;p&gt;następnie program zapyta użytkownika o pojemność portfela, którą ten wpisze, np:&lt;/p&gt;

&lt;p&gt;2340&lt;/p&gt;

&lt;p&gt;lub&lt;/p&gt;

&lt;p&gt;1234,5&lt;/p&gt;

&lt;p&gt;ale już nie&lt;/p&gt;

&lt;p&gt;1234.5&lt;/p&gt;

&lt;p&gt;Następnie użytkownik będzie mógł rozpocząć zakupy. Przykładowe polecenie zakupu:&lt;/p&gt;

&lt;p&gt;kup Pomidory 23,564&lt;/p&gt;

&lt;p&gt;lub&lt;/p&gt;

&lt;p&gt;kup pomidory 23,564&lt;/p&gt;

&lt;p&gt;lub&lt;/p&gt;

&lt;p&gt;kup Kawa ziarnista 5&lt;/p&gt;

&lt;p&gt;Po każdym zakupie sklep poinformuje o zawartości portfela. Proszę pamiętać o dokładnej walidacji wprowadzanych danych.&lt;/p&gt;

&lt;p&gt;użytkownik będzie kontynuował zakupy aż wpisze “end”. Po tym poleceniu sklep wypisze listę zakupionych produktów, ilość wydanych pieniędzy oraz czas trwania zakupów.&lt;/p&gt;

&lt;p&gt;Do nauczenia
Daty (Date, LocalDateTime, Calendar, System.currentTimeInMilis()), Scanner, jar&lt;/p&gt;

&lt;p&gt;Rozwiązania należy spakować w zip sklep_(inicjały i nr indeksu).zip i umieścić w folderze &lt;a href=&#34;https://drive.google.com/drive/folders/0B9OvVI7-iiR2U2hUWnlJT04zdDg&#34;&gt;na google drive&lt;/a&gt; do 2017.04.19, godz 23.59
w zip ma się znajdować plik sklep_(inicjały i nr indeksu).jar, oraz wyeksportowany projekt (o nazwie toż samej).&lt;/p&gt;

&lt;p&gt;Zachęcam do korzystania z testów automatycznych (te jednak nie są tym razem obowiązkowe)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 5 - Dziedziczenie</title>
      <link>https://franaszek.github.io/project/zajecia-5/</link>
      <pubDate>Tue, 28 Mar 2017 13:19:09 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-5/</guid>
      <description>&lt;h2&gt;2017-08-22&lt;/h2&gt;

&lt;h2&gt;Laboratorium&lt;/h2&gt;

&lt;p&gt;&lt;h3&gt;Zadanie &amp;ldquo;Wielomian&amp;rdquo;&lt;/h3&gt;
Zaimplementuj &amp;lsquo;wielomian&amp;rsquo; jednej zmiennej i operacje na nim:
&lt;pre&gt;Wielomian dodaj(Wielomian)&lt;/pre&gt;
&lt;pre&gt;String toString()&lt;/pre&gt;
&lt;pre&gt;Wielomian mnozenie(Wielomian)&lt;/pre&gt;
&lt;pre&gt;Double wartoscWPkt(Double pkt)&lt;/pre&gt;
Różne konstruktory: jako jednomian, lub z tablicy współczynników.
dla chętnych:
&lt;pre&gt;Wielomian podziel(Wielomian)&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Zadanie &amp;ldquo;Bufor cykliczny&amp;rdquo;&lt;/h3&gt;
Należy zaimplementować bufor cykliczny, który będzie obsługiwał operacje wstawiania/usuwania z początku i końca, obliczał liczbę elementów w buforze, sprawdzał czy jest pusty. Implementacja na tablicy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zajęcia 4 - Klasy</title>
      <link>https://franaszek.github.io/project/zajecia-4/</link>
      <pubDate>Fri, 17 Mar 2017 14:53:39 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-4/</guid>
      <description>&lt;h2&gt;2017-08-22&lt;/h2&gt;

&lt;h2&gt;Laboratorium&lt;/h2&gt;
Wprowadzimy jUnit oraz strukturę projektu. Omówimy zadania Sito Arystotelesa i Ułamek.

&lt;h2&gt;Ćwiczenia&lt;/h2&gt;

&lt;p&gt;Na rozgrzewkę zaimplementujemy rozkład liczby na czynniki pierwsze. Następnie wykonamy projekt gry &amp;ldquo;Monopoly&amp;rdquo;.&lt;/p&gt;

&lt;!-- opowiemy o jdk, jre, jvm i garbage collector. --&gt;  

&lt;hr /&gt;

&lt;h3&gt;Praca domowa: Sito Arystotelesa&lt;/h3&gt;

&lt;p&gt;Dla podanej liczby n zwróć największą liczbę pierwszą &amp;lt;= n.&lt;/p&gt;

&lt;p&gt;Szkielet projektu (do zaimportowania w eclipse) można znaleźć &lt;a href=&#34;https://franaszek.github.io/download/project.zip&#34;&gt;tutaj&lt;/a&gt; Szkielet zawiera testy automatyczne - omówimy ten temat na zajęciach. Program powinien być uruchamialny za pomocą klasy &lt;pre&gt;Program&lt;/pre&gt;Implementacja algorytmu ma się znaleźć w klasie &lt;pre&gt;EratosthenesSieve&lt;/pre&gt; Nie krępujcie się używać dowolnych klas pomocniczych.&lt;/p&gt;

&lt;h3&gt;Praca domowa: Ułamek&lt;/h3&gt;
 

&lt;p&gt;Należy zaplementować klasę “Ulamek”, (proszę bez polskich znaków tym razem), która w konstruktorze przyjmie wartości ‘licznik’ i ‘mianownik’ typu ‘long’.
Ułamek ma posiadać dwie operacje:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;
public Ulamek dodaj(Ulamek ulamek)
&lt;/pre&gt;&lt;pre&gt;
public Ulamek pomnóż(Ulamek ulamek)
&lt;/pre&gt;&lt;pre&gt;
public String toString()
&lt;/pre&gt;
Dla chętnych: metody odejmij i podziel.
Należy również zaimplementować testy automatyczne (junit), dla każdej z powyższych operacji (po 3 testy do operacji) UWAGA: co zrobić z przypadkami skrajnymi? Warto dodać testy, które to sprawdzą.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;b&gt;Rozwiązania należy wysłać na mój adres (w temacie: &amp;ldquo;[PO ex2] Imię Nazwisko&amp;rdquo;), do dnia 29.03.2017. Email ma zawierać wyeksportowany projekt do formatu zip. &lt;/b&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 3 - Java</title>
      <link>https://franaszek.github.io/project/zajecia-3/</link>
      <pubDate>Tue, 14 Mar 2017 14:02:31 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-3/</guid>
      <description>&lt;h2&gt;2017-15-03&lt;/h2&gt;

&lt;p&gt;&lt;h4&gt;Lab&lt;/h4&gt;
Zainstalujemy:
Java 8: &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;http://www.oracle.com/...&lt;/a&gt;
I Eclipse: &lt;a href=&#34;http://www.eclipse.org/downloads/&#34;&gt;http://www.eclipse.org/...&lt;/a&gt;
Lub IDEA: &lt;a href=&#34;https://www.jetbrains.com/idea/download/&#34;&gt;https://www.jetbrains.com/...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zrobimy pierwszy projekt w IDE (Integrated Development Environment) i spróbujemy go skompilować poprzez IDE oraz z konsoli.&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;Lab i Ćwiczenia&lt;/h4&gt;
Będziemy rozwiązywać różne problemy algorytmiczne.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 2 - Projektowanie</title>
      <link>https://franaszek.github.io/project/zajecia-2/</link>
      <pubDate>Wed, 08 Mar 2017 14:02:31 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-2/</guid>
      <description>&lt;h2&gt;2017-08-03&lt;/h2&gt;

&lt;p&gt;&lt;h4&gt;Lab&lt;/h4&gt;
Na zajęciach zaprojektujemy grę karcianą (brydż lub poker).
&lt;br /&gt;
zasady gry w brydża: &lt;a href=&#34;http://www.zasadygry.pl/brydz_zasady_gry_13_1.htm&#34;&gt;http://www.zasadygry.pl/brydz...&lt;/a&gt;
&lt;br /&gt;
Napiszemy pierwszy program w java - Na razie używając konsoli, a następnie skompilujemy go:
&lt;pre&gt;javac &amp;lt;nazwa&amp;gt;.java&lt;/pre&gt;
i uruchomimy:
&lt;pre&gt;java &amp;lt;nazwa&amp;gt;&lt;/pre&gt;
Zapoznamy się z metodą startową &amp;ldquo;main&amp;rdquo; i przećwiczymy działanie parametrów wejściowych :
&lt;pre&gt;
public static void main(String[] args) {
    &amp;hellip;
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Omówimy również pierwszą pracę domową! (dokończenie projektu gry karcianej)
&lt;hr /&gt;
&lt;h4&gt;Ćwiczenia&lt;/h4&gt;
Na ćwiczeniach rozwiążemy problem podziału skarbów przez bilba. (zadanie z kolokwium z 2001 roku).
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;h4&gt;Pierwsza praca domowa (1pkt)&lt;/h4&gt;
Zaprojektuj w DIA diagram klas reprezentujący grę w pokera. Uwzględnij klasy abstrakcyjne, publiczność/prywatność metod (+, -, #), generalizację i agregację. Termin oddania : 2017-03-15.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
