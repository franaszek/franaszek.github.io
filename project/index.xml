<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Bartosz Franaszek</title>
    <link>https://franaszek.github.io/project/index.xml</link>
    <description>Recent content in Projects on Bartosz Franaszek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Bartosz Franaszek</copyright>
    <lastBuildDate>Tue, 04 Apr 2017 22:34:56 +0200</lastBuildDate>
    <atom:link href="/project/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>zajecia 6</title>
      <link>https://franaszek.github.io/project/zajecia-6/</link>
      <pubDate>Tue, 04 Apr 2017 22:34:56 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-6/</guid>
      <description>&lt;h2&gt;2017-08-22&lt;/h2&gt;

&lt;h2&gt;Laboratorium&lt;/h2&gt;

&lt;p&gt;JVM, JRE, JDK?&lt;/p&gt;

&lt;p&gt;Zadanie: klasa Konto.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;SKLEP&lt;/h3&gt;

&lt;p&gt;Napisz Program “sklep.jar”, który będzie umożliwiał zakupy (standard in/out) wybranych produktów (z co najmniej dziesięciu). Produkty dzielą się na dwa rodzaje: produkty na sztuki i produkty na wagę.&lt;/p&gt;

&lt;p&gt;Program po uruchomieniu za pomocą
&lt;pre&gt;java -jar sklep.jar&lt;/pre&gt;
przedstawi się, wypisze bieżącą datę i godzinę oraz listę produktów wraz z dostępnością oraz ceną, np.:&lt;/p&gt;

&lt;p&gt;Pomidory, cena: 9,99zł/kg, dostępne 200kg&lt;/p&gt;

&lt;p&gt;Kawa ziarnista, opakowanie 0,5kg, cena: 41,99zł, dostępne 16 sztuk.&lt;/p&gt;

&lt;p&gt;następnie program zapyta użytkownika o pojemność portfela, którą ten wpisze, np:&lt;/p&gt;

&lt;p&gt;2340&lt;/p&gt;

&lt;p&gt;lub&lt;/p&gt;

&lt;p&gt;1234,5&lt;/p&gt;

&lt;p&gt;ale już nie&lt;/p&gt;

&lt;p&gt;1234.5&lt;/p&gt;

&lt;p&gt;Następnie użytkownik będzie mógł rozpocząć zakupy. Przykładowe polecenie zakupu:&lt;/p&gt;

&lt;p&gt;kup Pomidory 23,564&lt;/p&gt;

&lt;p&gt;lub&lt;/p&gt;

&lt;p&gt;kup pomidory 23,564&lt;/p&gt;

&lt;p&gt;lub&lt;/p&gt;

&lt;p&gt;kup Kawa ziarnista 5&lt;/p&gt;

&lt;p&gt;Po każdym zakupie sklep poinformuje o zawartości portfela. Proszę pamiętać o dokładnej walidacji wprowadzanych danych.&lt;/p&gt;

&lt;p&gt;użytkownik będzie kontynuował zakupy aż wpisze “end”. Po tym poleceniu sklep wypisze listę zakupionych produktów, ilość wydanych pieniędzy oraz czas trwania zakupów.&lt;/p&gt;

&lt;p&gt;Do nauczenia
Daty (Date, LocalDateTime, Calendar, System.currentTimeInMilis()), Scanner, jar&lt;/p&gt;

&lt;p&gt;Rozwiązania należy spakować w zip (nr indeksu).zip i umieścić w folderze (tutaj pojawi się link do folderu) do 2017.04.12, godz 23.59
w zip ma się znajdować plik sklep.jar, oraz wyeksportowany projekt z eclipse lub idea.&lt;/p&gt;

&lt;p&gt;Zachęcam do korzystania z testów automatycznych (te jednak nie są tym razem obowiązkowe)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajecia 5 - Dziedziczenie</title>
      <link>https://franaszek.github.io/project/zajecia-5/</link>
      <pubDate>Tue, 28 Mar 2017 13:19:09 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-5/</guid>
      <description>&lt;h2&gt;2017-08-22&lt;/h2&gt;

&lt;h2&gt;Laboratorium&lt;/h2&gt;

&lt;p&gt;&lt;h3&gt;Zadanie &amp;ldquo;Wielomian&amp;rdquo;&lt;/h3&gt;
Zaimplementuj &amp;lsquo;wielomian&amp;rsquo; jednej zmiennej i operacje na nim:
&lt;pre&gt;Wielomian dodaj(Wielomian)&lt;/pre&gt;
&lt;pre&gt;String toString()&lt;/pre&gt;
&lt;pre&gt;Wielomian mnozenie(Wielomian)&lt;/pre&gt;
&lt;pre&gt;Double wartoscWPkt(Double pkt)&lt;/pre&gt;
Różne konstruktory: jako jednomian, lub z tablicy współczynników.
dla chętnych:
&lt;pre&gt;Wielomian podziel(Wielomian)&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Zadanie &amp;ldquo;Bufor cykliczny&amp;rdquo;&lt;/h3&gt;
Należy zaimplementować bufor cykliczny, który będzie obsługiwał operacje wstawiania/usuwania z początku i końca, obliczał liczbę elementów w buforze, sprawdzał czy jest pusty. Implementacja na tablicy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zajęcia 4 - Klasy</title>
      <link>https://franaszek.github.io/project/zajecia-4/</link>
      <pubDate>Fri, 17 Mar 2017 14:53:39 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-4/</guid>
      <description>&lt;h2&gt;2017-08-22&lt;/h2&gt;

&lt;h2&gt;Laboratorium&lt;/h2&gt;
Wprowadzimy jUnit oraz strukturę projektu. Omówimy zadania Sito Arystotelesa i Ułamek.

&lt;h2&gt;Ćwiczenia&lt;/h2&gt;

&lt;p&gt;Na rozgrzewkę zaimplementujemy rozkład liczby na czynniki pierwsze. Następnie wykonamy projekt gry &amp;ldquo;Monopoly&amp;rdquo;.&lt;/p&gt;

&lt;!-- opowiemy o jdk, jre, jvm i garbage collector. --&gt;  

&lt;hr /&gt;

&lt;h3&gt;Praca domowa: Sito Arystotelesa&lt;/h3&gt;

&lt;p&gt;Dla podanej liczby n zwróć największą liczbę pierwszą &amp;lt;= n.&lt;/p&gt;

&lt;p&gt;Szkielet projektu (do zaimportowania w eclipse) można znaleźć &lt;a href=&#34;https://franaszek.github.io/download/project.zip&#34;&gt;tutaj&lt;/a&gt; Szkielet zawiera testy automatyczne - omówimy ten temat na zajęciach. Program powinien być uruchamialny za pomocą klasy &lt;pre&gt;Program&lt;/pre&gt;Implementacja algorytmu ma się znaleźć w klasie &lt;pre&gt;EratosthenesSieve&lt;/pre&gt; Nie krępujcie się używać dowolnych klas pomocniczych.&lt;/p&gt;

&lt;h3&gt;Praca domowa: Ułamek&lt;/h3&gt;
 

&lt;p&gt;Należy zaplementować klasę “Ulamek”, (proszę bez polskich znaków tym razem), która w konstruktorze przyjmie wartości ‘licznik’ i ‘mianownik’ typu ‘long’.
Ułamek ma posiadać dwie operacje:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;
public Ulamek dodaj(Ulamek ulamek)
&lt;/pre&gt;&lt;pre&gt;
public Ulamek pomnóż(Ulamek ulamek)
&lt;/pre&gt;&lt;pre&gt;
public String toString()
&lt;/pre&gt;
Dla chętnych: metody odejmij i podziel.
Należy również zaimplementować testy automatyczne (junit), dla każdej z powyższych operacji (po 3 testy do operacji) UWAGA: co zrobić z przypadkami skrajnymi? Warto dodać testy, które to sprawdzą.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;b&gt;Rozwiązania należy wysłać na mój adres (w temacie: &amp;ldquo;[PO ex2] Imię Nazwisko&amp;rdquo;), do dnia 29.03.2017. Email ma zawierać wyeksportowany projekt do formatu zip. &lt;/b&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 3 - Java</title>
      <link>https://franaszek.github.io/project/zajecia-3/</link>
      <pubDate>Tue, 14 Mar 2017 14:02:31 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-3/</guid>
      <description>&lt;h2&gt;2017-15-03&lt;/h2&gt;

&lt;p&gt;&lt;h4&gt;Lab&lt;/h4&gt;
Zainstalujemy:
Java 8: &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;http://www.oracle.com/...&lt;/a&gt;
I Eclipse: &lt;a href=&#34;http://www.eclipse.org/downloads/&#34;&gt;http://www.eclipse.org/...&lt;/a&gt;
Lub IDEA: &lt;a href=&#34;https://www.jetbrains.com/idea/download/&#34;&gt;https://www.jetbrains.com/...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zrobimy pierwszy projekt w IDE (Integrated Development Environment) i spróbujemy go skompilować poprzez IDE oraz z konsoli.&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;Lab i Ćwiczenia&lt;/h4&gt;
Będziemy rozwiązywać różne problemy algorytmiczne.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 2 - Projektowanie</title>
      <link>https://franaszek.github.io/project/zajecia-2/</link>
      <pubDate>Wed, 08 Mar 2017 14:02:31 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-2/</guid>
      <description>&lt;h2&gt;2017-08-03&lt;/h2&gt;

&lt;p&gt;&lt;h4&gt;Lab&lt;/h4&gt;
Na zajęciach zaprojektujemy grę karcianą (brydż lub poker).
&lt;br /&gt;
zasady gry w brydża: &lt;a href=&#34;http://www.zasadygry.pl/brydz_zasady_gry_13_1.htm&#34;&gt;http://www.zasadygry.pl/brydz...&lt;/a&gt;
&lt;br /&gt;
Napiszemy pierwszy program w java - Na razie używając konsoli, a następnie skompilujemy go:
&lt;pre&gt;javac &amp;lt;nazwa&amp;gt;.java&lt;/pre&gt;
i uruchomimy:
&lt;pre&gt;java &amp;lt;nazwa&amp;gt;&lt;/pre&gt;
Zapoznamy się z metodą startową &amp;ldquo;main&amp;rdquo; i przećwiczymy działanie parametrów wejściowych :
&lt;pre&gt;
public static void main(String[] args) {
    &amp;hellip;
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Omówimy również pierwszą pracę domową! (dokończenie projektu gry karcianej)
&lt;hr /&gt;
&lt;h4&gt;Ćwiczenia&lt;/h4&gt;
Na ćwiczeniach rozwiążemy problem podziału skarbów przez bilba. (zadanie z kolokwium z 2001 roku).
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;h4&gt;Pierwsza praca domowa (1pkt)&lt;/h4&gt;
Zaprojektuj w DIA diagram klas reprezentujący grę w pokera. Uwzględnij klasy abstrakcyjne, publiczność/prywatność metod (+, -, #), generalizację i agregację. Termin oddania : 2017-03-15.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 1 - Wstęp</title>
      <link>https://franaszek.github.io/project/zajecia-1/</link>
      <pubDate>Wed, 01 Mar 2017 14:02:31 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-1/</guid>
      <description>&lt;h2&gt;2017-01-03&lt;/h2&gt; 

&lt;p&gt;&lt;h4&gt;Lab&lt;/h5&gt;
&lt;div&gt;
Na zajęciach omówimy projektowanie obiektowe na przykładzie &amp;ldquo;Pojazdów&amp;rdquo; - struktury drzewiastej reprezentującej dziedziczenie.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Wprowadzimy:
&lt;lu&gt;
 &lt;li&gt;notację pudełkową dla klas&lt;/li&gt;
 &lt;li&gt;strzałki do wyrażania podobieństwa (dziedziczenia)&lt;/li&gt;
 &lt;li&gt;podział na cechy/czynności&lt;/li&gt;
 &lt;li&gt;pojęcia abstrakcyjne (oznaczamy wielką literą A w kółku)&lt;/li&gt;
&lt;/lu&gt;
&lt;br /&gt;
Będziemy pracować z &lt;a href=&#34;https://sourceforge.net/projects/dia-installer/&#34;&gt;DIA&lt;/a&gt;&lt;br /&gt;
Dla zainteresowanych, więcej o diagramach klas można poczytać np tutaj:
&lt;a href=&#34;https://www.ibm.com/developerworks/rational/library/content/RationalEdge/sep04/bell/&#34;&gt;https://www.ibm.com/...&lt;/a&gt;
&lt;br /&gt;
Polecam też ważniaka:
&lt;a href=&#34;http://wazniak.mimuw.edu.pl/index.php?title=Programowanie_obiektowe&#34;&gt;http://wazniak.mimuw.edu.pl/...&lt;/a&gt;
&lt;br /&gt;
A przede wszystkim moodle:
&lt;a href=&#34;https://moodle.mimuw.edu.pl/course/view.php?id=14&#34;&gt;https://moodle.mimuw.edu.pl/...&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h4&gt;Ćwiczenia&lt;/h4&gt;
Na ćwiczeniach omówimy przykładowe interfejsy dla Kolejki, Stosu i Grafu. Wykorzystamy Kolejkę i Stos do zaimplementowania BFS i DFS&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wyniki</title>
      <link>https://franaszek.github.io/project/points/</link>
      <pubDate>Wed, 01 Mar 2017 00:03:17 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/points/</guid>
      <description>&lt;p&gt;Za małe prace domowe można zdobyć maksymalnie 10-15 punktów, jednak ostateczna liczba przyznanych punktów studenta wynosi:&lt;/p&gt;

&lt;pre&gt;Math.min(student.zdobytePkt(), 10);&lt;/pre&gt;

&lt;p&gt;Bieżące wyniki:&lt;/p&gt;

&lt;table&gt;
                &lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;KARTY&lt;/th&gt;   &lt;th&gt;UŁAMEK&lt;/th&gt; &lt;th&gt;SITO&lt;/th&gt;&lt;/tr&gt;          
&lt;!-- BM --&gt;     &lt;tr&gt;&lt;td&gt;385247&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;  &lt;/tr&gt;               
&lt;!-- BP --&gt;     &lt;tr&gt;&lt;td&gt;385254&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;  &lt;/tr&gt;               
&lt;!-- DM --&gt;     &lt;tr&gt;&lt;td&gt;372285&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;  &lt;/tr&gt;               
&lt;!-- FM --&gt;     &lt;tr&gt;&lt;td&gt;385423&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;  &lt;/tr&gt;               
&lt;!-- KJ --&gt;     &lt;tr&gt;&lt;td&gt;359784&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;  &lt;/tr&gt;               
&lt;!-- KK --&gt;     &lt;tr&gt;&lt;td&gt;385830&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;  &lt;/tr&gt;               

&lt;!-- KP --&gt;     &lt;tr&gt;&lt;td&gt;371141&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;  &lt;/tr&gt;               
&lt;!-- KV --&gt;     &lt;tr&gt;&lt;td&gt;372360&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;  &lt;/tr&gt;               
&lt;!-- MP --&gt;     &lt;tr&gt;&lt;td&gt;385901&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;  &lt;/tr&gt;               
&lt;!-- RA --&gt;     &lt;tr&gt;&lt;td&gt;360949&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;  &lt;/tr&gt;               
&lt;!-- ŚR --&gt;     &lt;tr&gt;&lt;td&gt;322227&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;  &lt;/tr&gt;               
&lt;!-- TP --&gt;     &lt;tr&gt;&lt;td&gt;347283&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;  &lt;/tr&gt;               

&lt;!-- WK --&gt;     &lt;tr&gt;&lt;td&gt;373379&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;  &lt;/tr&gt;               
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>
