<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Bartosz Franaszek</title>
    <link>https://franaszek.github.io/project/index.xml</link>
    <description>Recent content in Projects on Bartosz Franaszek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Bartosz Franaszek</copyright>
    <lastBuildDate>Wed, 17 May 2017 09:38:18 +0200</lastBuildDate>
    <atom:link href="/project/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>zajęcia 10 - Wyjątki/generyki</title>
      <link>https://franaszek.github.io/project/zajecia-10/</link>
      <pubDate>Wed, 17 May 2017 09:38:18 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-10/</guid>
      <description>&lt;p&gt;&lt;h1&gt;2017-05-17&lt;/h1&gt;
&lt;h2&gt;Laboratorium&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Dzisiaj robimy zadania 1 i 2 z &lt;a href=http://wazniak.mimuw.edu.pl/index.php?title=PO_Wyj%C4%85tki_c.d._-_%C4%87wiczenia&#34;&gt;Ważniaka&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Następnie, zaimplementujmy klasę Para&amp;lt;T1, T2&amp;gt;, która będzie posiadać konstuktor oraz gettery.&lt;/p&gt;

&lt;p&gt;Wykorzystamy klasę Para do własnej implementacji mapy, która zawsze będzie posortowana po kluczu, oraz będzie miała operacje:
&lt;pre&gt;
    void put(T1 key, T2 value);
&lt;/pre&gt;
&lt;pre&gt;
    T2 get(T1 key);
&lt;/pre&gt;
&lt;pre&gt;
    void print() // wypisze zawartość mapy w postaci: [key1-&amp;gt;value1, key2-&amp;gt;value2,&amp;hellip;]
&lt;/pre&gt;
&lt;hr /&gt;&lt;/p&gt;

&lt;h2&gt;Ćwiczenia&lt;/h2&gt;

&lt;p&gt;Zadania: Przestrzeń liniowa nad ciałem K&lt;/p&gt;

&lt;p&gt;Implementacja BST&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 9 - wyjątki</title>
      <link>https://franaszek.github.io/project/zajecia-9/</link>
      <pubDate>Tue, 09 May 2017 14:39:36 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-9/</guid>
      <description>&lt;p&gt;&lt;h1&gt;2017-05-10&lt;/h1&gt;
&lt;h2&gt;Laboratorium&lt;/h2&gt;
&lt;b&gt;Zadanie&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Zaimplementuj interfejsy:
&lt;pre&gt;
Generator
    int daj(); //daje kolejną wartość
&lt;/pre&gt;
&lt;pre&gt;
Filtr
    void weź(int i);
&lt;/pre&gt;
&lt;pre&gt;
Wypisywacz
    void wypisz();
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;A następnie klasy implementujące:&lt;/p&gt;

&lt;p&gt;Generator Naturalny, który daje kolejne liczby naturalne.&lt;/p&gt;

&lt;p&gt;Generator Czytelnik, który wczytuje kolejne liczby z wejścia.&lt;/p&gt;

&lt;p&gt;Generator Losowy, który losuje kolejne liczby.&lt;/p&gt;

&lt;p&gt;Filtr Porównywacz: jak dostaje mniejszą liczbę od swojej, to zapamiętuje, a starą posyła do następnego filtra. jak dostaje większą-równą, to posyła dalej.
ZaślepkaP: dostaje liczbę, tworzy nowy Filtr Porównywacz z tą liczbą.&lt;/p&gt;

&lt;p&gt;Filtr Dzielnik: jak nowa liczba jest wielokrotnością własnej, to nic nie robi, wpp przesyła dalej.&lt;/p&gt;

&lt;p&gt;ZaślepkaD: dostaje liczbę, tworzy nowy Filtr Dzielnik z tą liczbą.&lt;/p&gt;

&lt;p&gt;Następnie zbuduj zestaw generator-filtr zaślepka do posortowania liczb, albo wygenerowania zestawu liczb pierwszych.&lt;/p&gt;

&lt;p&gt;Filtry muszą implementować Wypisywacz, ale zaślepki już nie muszą.&lt;/p&gt;

&lt;p&gt;Dodatkowo, zaimplementuj metodę, która dostaje generator i filtr (nie wie jaki) i wypisze wynik wielokrotnego zastosowania &amp;lsquo;daj&amp;rsquo;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Ćwiczenia&lt;/h2&gt;

&lt;p&gt;Zadanie ONP.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Pojawiło się zadanie laboratoryjne. Proszę gotowe rozwiązania zamieszczać w &lt;a href=&#34;https://drive.google.com/drive/folders/0B9OvVI7-iiR2U2hUWnlJT04zdDg&#34;&gt;tym folderze&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 8</title>
      <link>https://franaszek.github.io/project/zajecia-8/</link>
      <pubDate>Mon, 24 Apr 2017 15:28:14 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-8/</guid>
      <description>&lt;p&gt;&lt;h1&gt;2017-04-26&lt;/h1&gt;
&lt;h2&gt;Laboratorium&lt;/h2&gt;
&lt;b&gt;Zadanie&lt;/b&gt; Hierarchia wyrażeń logicznych&lt;/p&gt;

&lt;p&gt;Napisz hierarchię wyrażeń logicznych (analogiczne do wyrażeń arytmetycznych)&lt;/p&gt;

&lt;p&gt;stałe: True, False&lt;/p&gt;

&lt;p&gt;zmienna: X&lt;/p&gt;

&lt;p&gt;operatory 2-argumentowe: and, or, xor, &amp;hellip;&lt;/p&gt;

&lt;p&gt;operator 1-argumentowy: not, ?&lt;/p&gt;

&lt;p&gt;Operacje:
&lt;pre&gt;
public void printOut();
public boolean countForValue(boolean x); //również wypisze wartość na konsolę.
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Uwaga&lt;/b&gt; Zadanie za jeden punkt. Kto skończy na Laboratorium, ten od razu zgarnie, kto nie skończy, ten zgarnie na kolejnych zajęciach.&lt;/p&gt;

&lt;hr/&gt;

&lt;h2&gt;Ćwiczenia&lt;/h2&gt;

&lt;p&gt;Gra w Blackjacka (nasze Oczko, czy Dwadzieścia-jeden) jest grą karcianą, polegającą na zbieraniu kart tak, by uzbierać więcej oczek na kartach niż rywale, ale nie więcej niż 21. Dokładne reguły gry bywają różne, my przyjmiemy w tym zadaniu pewne ich uproszczenie.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;h2&gt;Praca domowa: Sklep 2&lt;/h2&gt;
&lt;b&gt;Za dwa punkty&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Do naszej aktualnej implementacji należy dodać rozszeżenie: dostawca. Od teraz, włączając sklep, będzie można wpisać &amp;ldquo;end&amp;rdquo; - zakończy program, lub wybrać jeden z dwóch trybów, odpowiednio, za pomocą komend: &amp;ldquo;klient&amp;rdquo;, aby wejść w tryb klienta, i tam bez większych zmian, lub &amp;ldquo;dostawca&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;W przypadku wpisania innego polecenia niż klient/dostawca/end, program ma wyrzucić elegancki wyjątek (własny).&lt;/p&gt;

&lt;p&gt;Po wybraniu trybu &amp;ldquo;dostawca&amp;rdquo;, za pomocą poleceń można dodawać produkty do sklepu:
&lt;pre&gt;
dostarcz pomidory na_wage 10 1000
&lt;/pre&gt;
gdzie &amp;ldquo;pomidory&amp;rdquo; to nazwa produktu, &amp;ldquo;10&amp;rdquo; to cena, a &amp;ldquo;1000&amp;rdquo; to ilość, lub:
&lt;pre&gt;
dostarcz laptop na_sztuki 3999 100
&lt;/pre&gt;
gdzie &amp;ldquo;laptop&amp;rdquo; to nazwa, &amp;ldquo;3999&amp;rdquo; to cena, a &amp;ldquo;100&amp;rdquo; to liczba sztuk.&lt;/p&gt;

&lt;p&gt;Proszę zwróćcie uwagę na polecenia &amp;ldquo;na_wage&amp;rdquo; oraz &amp;ldquo;na_sztuki&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;operacja &amp;ldquo;end&amp;rdquo; pozwala wrócić do wyboru klient/dostawca.&lt;/p&gt;

&lt;p&gt;W trybie &amp;ldquo;klient&amp;rdquo; można wykonać polecenie &amp;ldquo;wypisz&amp;rdquo; które wypisuje stan sklepu (nazwa produktu, pisana małymi literami, data (i godzina z sekundami) dodania produktu, ilość/liczba oraz cena, np:&lt;/p&gt;

&lt;pre&gt;
Pomidory, dodane 2017.04.26 23:14:23, ilość: 1000kg, cena za kilogram: 10zł
Laptop, dodane 2017.04.26 23:14:45, liczba: 100, cena za sztukę: 3999zł
&lt;/pre&gt;

&lt;p&gt;Następnie opracja &amp;ldquo;kup&amp;rdquo;, jak poprzednio (ale mogę pisać wielką bądź małą literą, a nazwy mogą mieć spację) oraz operacja &amp;ldquo;end&amp;rdquo; która pozwala wrócić do trybu wyboru dostawca/klient.&lt;/p&gt;

&lt;p&gt;&lt;b&gt; uwagi&lt;/b&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Jeżeli klient wejdzie do sklepu przed dostawcą, to sklep jest pusty.&lt;/li&gt;
&lt;li&gt;Nazwy produktów można pisać małą lub wielką literą. Nazwy produktów mogą zawierać spacje!&lt;/li&gt;
&lt;li&gt;Proszę zadbać o to, aby w programach nie było polskich znaków (nigdzie) i aby programy były w UTF-8.&lt;/li&gt;
&lt;li&gt;Rozwiązania należy umieścić w tym samym folderze co ostatnio, lecz pod nazwą
&lt;pre&gt;
sklep2_(inicjały i numer indeksu).zip
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;tak jak ostatnio w paczce ma być projekt oraz wygenerowany JAR.&lt;/li&gt;
&lt;li&gt;termin oddania: &lt;b&gt;2017-05-14&lt;/b&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 7</title>
      <link>https://franaszek.github.io/project/zajecia-7/</link>
      <pubDate>Tue, 11 Apr 2017 14:47:08 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-7/</guid>
      <description>&lt;h1&gt;UWAGA: w dniu 2017-04-12 laboratoria nie odbędą się!&lt;/h1&gt;

&lt;h2&gt;Ćwiczenia (odbędą się, standardowo w sali 3160)&lt;/h2&gt;

&lt;p&gt;Zakończymy przykład na wielomiany.&lt;/p&gt;

&lt;p&gt;Rozwiążemy zadania przygotowawcze do kolokwium. Stare kolokwia można znaleźć &lt;a href=&#34;https://moodle.mimuw.edu.pl/course/view.php?id=14#section-20&#34;&gt;tutaj&lt;/a&gt;. Warto również zapoznać się z &lt;a href=&#34;https://moodle.mimuw.edu.pl/mod/page/view.php?id=635&#34;&gt;tym&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 6</title>
      <link>https://franaszek.github.io/project/zajecia-6/</link>
      <pubDate>Tue, 04 Apr 2017 22:34:56 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-6/</guid>
      <description>&lt;h2&gt;2017-08-22&lt;/h2&gt;

&lt;h2&gt;Laboratorium&lt;/h2&gt;

&lt;p&gt;JVM, JRE, JDK?&lt;/p&gt;

&lt;p&gt;Zadanie: klasa Konto.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;SKLEP&lt;/h3&gt;

&lt;p&gt;Napisz Program “sklep.jar”, który będzie umożliwiał zakupy (standard in/out) wybranych produktów (z co najmniej dziesięciu). Produkty dzielą się na dwa rodzaje: produkty na sztuki i produkty na wagę.&lt;/p&gt;

&lt;p&gt;Program po uruchomieniu za pomocą
&lt;pre&gt;java -jar sklep.jar&lt;/pre&gt;
przedstawi się, wypisze bieżącą datę i godzinę oraz listę produktów wraz z dostępnością oraz ceną, np.:&lt;/p&gt;

&lt;p&gt;Pomidory, cena: 9,99zł/kg, dostępne 200kg&lt;/p&gt;

&lt;p&gt;Kawa ziarnista, opakowanie 0,5kg, cena: 41,99zł, dostępne 16 sztuk.&lt;/p&gt;

&lt;p&gt;następnie program zapyta użytkownika o pojemność portfela, którą ten wpisze, np:&lt;/p&gt;

&lt;p&gt;2340&lt;/p&gt;

&lt;p&gt;lub&lt;/p&gt;

&lt;p&gt;1234,5&lt;/p&gt;

&lt;p&gt;ale już nie&lt;/p&gt;

&lt;p&gt;1234.5&lt;/p&gt;

&lt;p&gt;Następnie użytkownik będzie mógł rozpocząć zakupy. Przykładowe polecenie zakupu:&lt;/p&gt;

&lt;p&gt;kup Pomidory 23,564&lt;/p&gt;

&lt;p&gt;lub&lt;/p&gt;

&lt;p&gt;kup pomidory 23,564&lt;/p&gt;

&lt;p&gt;lub&lt;/p&gt;

&lt;p&gt;kup Kawa ziarnista 5&lt;/p&gt;

&lt;p&gt;Po każdym zakupie sklep poinformuje o zawartości portfela. Proszę pamiętać o dokładnej walidacji wprowadzanych danych.&lt;/p&gt;

&lt;p&gt;użytkownik będzie kontynuował zakupy aż wpisze “end”. Po tym poleceniu sklep wypisze listę zakupionych produktów, ilość wydanych pieniędzy oraz czas trwania zakupów.&lt;/p&gt;

&lt;p&gt;Do nauczenia
Daty (Date, LocalDateTime, Calendar, System.currentTimeInMilis()), Scanner, jar&lt;/p&gt;

&lt;p&gt;Rozwiązania należy spakować w zip sklep_(inicjały i nr indeksu).zip i umieścić w folderze &lt;a href=&#34;https://drive.google.com/drive/folders/0B9OvVI7-iiR2U2hUWnlJT04zdDg&#34;&gt;na google drive&lt;/a&gt; do 2017.04.19, godz 23.59
w zip ma się znajdować plik sklep_(inicjały i nr indeksu).jar, oraz wyeksportowany projekt (o nazwie toż samej).&lt;/p&gt;

&lt;p&gt;Zachęcam do korzystania z testów automatycznych (te jednak nie są tym razem obowiązkowe)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 5 - Dziedziczenie</title>
      <link>https://franaszek.github.io/project/zajecia-5/</link>
      <pubDate>Tue, 28 Mar 2017 13:19:09 +0200</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-5/</guid>
      <description>&lt;h2&gt;2017-08-22&lt;/h2&gt;

&lt;h2&gt;Laboratorium&lt;/h2&gt;

&lt;p&gt;&lt;h3&gt;Zadanie &amp;ldquo;Wielomian&amp;rdquo;&lt;/h3&gt;
Zaimplementuj &amp;lsquo;wielomian&amp;rsquo; jednej zmiennej i operacje na nim:
&lt;pre&gt;Wielomian dodaj(Wielomian)&lt;/pre&gt;
&lt;pre&gt;String toString()&lt;/pre&gt;
&lt;pre&gt;Wielomian mnozenie(Wielomian)&lt;/pre&gt;
&lt;pre&gt;Double wartoscWPkt(Double pkt)&lt;/pre&gt;
Różne konstruktory: jako jednomian, lub z tablicy współczynników.
dla chętnych:
&lt;pre&gt;Wielomian podziel(Wielomian)&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Zadanie &amp;ldquo;Bufor cykliczny&amp;rdquo;&lt;/h3&gt;
Należy zaimplementować bufor cykliczny, który będzie obsługiwał operacje wstawiania/usuwania z początku i końca, obliczał liczbę elementów w buforze, sprawdzał czy jest pusty. Implementacja na tablicy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zajęcia 4 - Klasy</title>
      <link>https://franaszek.github.io/project/zajecia-4/</link>
      <pubDate>Fri, 17 Mar 2017 14:53:39 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-4/</guid>
      <description>&lt;h2&gt;2017-08-22&lt;/h2&gt;

&lt;h2&gt;Laboratorium&lt;/h2&gt;
Wprowadzimy jUnit oraz strukturę projektu. Omówimy zadania Sito Arystotelesa i Ułamek.

&lt;h2&gt;Ćwiczenia&lt;/h2&gt;

&lt;p&gt;Na rozgrzewkę zaimplementujemy rozkład liczby na czynniki pierwsze. Następnie wykonamy projekt gry &amp;ldquo;Monopoly&amp;rdquo;.&lt;/p&gt;

&lt;!-- opowiemy o jdk, jre, jvm i garbage collector. --&gt;  

&lt;hr /&gt;

&lt;h3&gt;Praca domowa: Sito Arystotelesa&lt;/h3&gt;

&lt;p&gt;Dla podanej liczby n zwróć największą liczbę pierwszą &amp;lt;= n.&lt;/p&gt;

&lt;p&gt;Szkielet projektu (do zaimportowania w eclipse) można znaleźć &lt;a href=&#34;https://franaszek.github.io/download/project.zip&#34;&gt;tutaj&lt;/a&gt; Szkielet zawiera testy automatyczne - omówimy ten temat na zajęciach. Program powinien być uruchamialny za pomocą klasy &lt;pre&gt;Program&lt;/pre&gt;Implementacja algorytmu ma się znaleźć w klasie &lt;pre&gt;EratosthenesSieve&lt;/pre&gt; Nie krępujcie się używać dowolnych klas pomocniczych.&lt;/p&gt;

&lt;h3&gt;Praca domowa: Ułamek&lt;/h3&gt;
 

&lt;p&gt;Należy zaplementować klasę “Ulamek”, (proszę bez polskich znaków tym razem), która w konstruktorze przyjmie wartości ‘licznik’ i ‘mianownik’ typu ‘long’.
Ułamek ma posiadać dwie operacje:&lt;/p&gt;

&lt;p&gt;&lt;pre&gt;
public Ulamek dodaj(Ulamek ulamek)
&lt;/pre&gt;&lt;pre&gt;
public Ulamek pomnóż(Ulamek ulamek)
&lt;/pre&gt;&lt;pre&gt;
public String toString()
&lt;/pre&gt;
Dla chętnych: metody odejmij i podziel.
Należy również zaimplementować testy automatyczne (junit), dla każdej z powyższych operacji (po 3 testy do operacji) UWAGA: co zrobić z przypadkami skrajnymi? Warto dodać testy, które to sprawdzą.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;b&gt;Rozwiązania należy wysłać na mój adres (w temacie: &amp;ldquo;[PO ex2] Imię Nazwisko&amp;rdquo;), do dnia 29.03.2017. Email ma zawierać wyeksportowany projekt do formatu zip. &lt;/b&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 3 - Java</title>
      <link>https://franaszek.github.io/project/zajecia-3/</link>
      <pubDate>Tue, 14 Mar 2017 14:02:31 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-3/</guid>
      <description>&lt;h2&gt;2017-15-03&lt;/h2&gt;

&lt;p&gt;&lt;h4&gt;Lab&lt;/h4&gt;
Zainstalujemy:
Java 8: &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;http://www.oracle.com/...&lt;/a&gt;
I Eclipse: &lt;a href=&#34;http://www.eclipse.org/downloads/&#34;&gt;http://www.eclipse.org/...&lt;/a&gt;
Lub IDEA: &lt;a href=&#34;https://www.jetbrains.com/idea/download/&#34;&gt;https://www.jetbrains.com/...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zrobimy pierwszy projekt w IDE (Integrated Development Environment) i spróbujemy go skompilować poprzez IDE oraz z konsoli.&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;Lab i Ćwiczenia&lt;/h4&gt;
Będziemy rozwiązywać różne problemy algorytmiczne.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 2 - Projektowanie</title>
      <link>https://franaszek.github.io/project/zajecia-2/</link>
      <pubDate>Wed, 08 Mar 2017 14:02:31 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-2/</guid>
      <description>&lt;h2&gt;2017-08-03&lt;/h2&gt;

&lt;p&gt;&lt;h4&gt;Lab&lt;/h4&gt;
Na zajęciach zaprojektujemy grę karcianą (brydż lub poker).
&lt;br /&gt;
zasady gry w brydża: &lt;a href=&#34;http://www.zasadygry.pl/brydz_zasady_gry_13_1.htm&#34;&gt;http://www.zasadygry.pl/brydz...&lt;/a&gt;
&lt;br /&gt;
Napiszemy pierwszy program w java - Na razie używając konsoli, a następnie skompilujemy go:
&lt;pre&gt;javac &amp;lt;nazwa&amp;gt;.java&lt;/pre&gt;
i uruchomimy:
&lt;pre&gt;java &amp;lt;nazwa&amp;gt;&lt;/pre&gt;
Zapoznamy się z metodą startową &amp;ldquo;main&amp;rdquo; i przećwiczymy działanie parametrów wejściowych :
&lt;pre&gt;
public static void main(String[] args) {
    &amp;hellip;
}
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Omówimy również pierwszą pracę domową! (dokończenie projektu gry karcianej)
&lt;hr /&gt;
&lt;h4&gt;Ćwiczenia&lt;/h4&gt;
Na ćwiczeniach rozwiążemy problem podziału skarbów przez bilba. (zadanie z kolokwium z 2001 roku).
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;h4&gt;Pierwsza praca domowa (1pkt)&lt;/h4&gt;
Zaprojektuj w DIA diagram klas reprezentujący grę w pokera. Uwzględnij klasy abstrakcyjne, publiczność/prywatność metod (+, -, #), generalizację i agregację. Termin oddania : 2017-03-15.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>zajęcia 1 - Wstęp</title>
      <link>https://franaszek.github.io/project/zajecia-1/</link>
      <pubDate>Wed, 01 Mar 2017 14:02:31 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/zajecia-1/</guid>
      <description>&lt;h2&gt;2017-01-03&lt;/h2&gt; 

&lt;p&gt;&lt;h4&gt;Lab&lt;/h5&gt;
&lt;div&gt;
Na zajęciach omówimy projektowanie obiektowe na przykładzie &amp;ldquo;Pojazdów&amp;rdquo; - struktury drzewiastej reprezentującej dziedziczenie.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Wprowadzimy:
&lt;lu&gt;
 &lt;li&gt;notację pudełkową dla klas&lt;/li&gt;
 &lt;li&gt;strzałki do wyrażania podobieństwa (dziedziczenia)&lt;/li&gt;
 &lt;li&gt;podział na cechy/czynności&lt;/li&gt;
 &lt;li&gt;pojęcia abstrakcyjne (oznaczamy wielką literą A w kółku)&lt;/li&gt;
&lt;/lu&gt;
&lt;br /&gt;
Będziemy pracować z &lt;a href=&#34;https://sourceforge.net/projects/dia-installer/&#34;&gt;DIA&lt;/a&gt;&lt;br /&gt;
Dla zainteresowanych, więcej o diagramach klas można poczytać np tutaj:
&lt;a href=&#34;https://www.ibm.com/developerworks/rational/library/content/RationalEdge/sep04/bell/&#34;&gt;https://www.ibm.com/...&lt;/a&gt;
&lt;br /&gt;
Polecam też ważniaka:
&lt;a href=&#34;http://wazniak.mimuw.edu.pl/index.php?title=Programowanie_obiektowe&#34;&gt;http://wazniak.mimuw.edu.pl/...&lt;/a&gt;
&lt;br /&gt;
A przede wszystkim moodle:
&lt;a href=&#34;https://moodle.mimuw.edu.pl/course/view.php?id=14&#34;&gt;https://moodle.mimuw.edu.pl/...&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;h4&gt;Ćwiczenia&lt;/h4&gt;
Na ćwiczeniach omówimy przykładowe interfejsy dla Kolejki, Stosu i Grafu. Wykorzystamy Kolejkę i Stos do zaimplementowania BFS i DFS&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wyniki</title>
      <link>https://franaszek.github.io/project/points/</link>
      <pubDate>Wed, 01 Mar 2017 00:03:17 +0100</pubDate>
      
      <guid>https://franaszek.github.io/project/points/</guid>
      <description>&lt;p&gt;Za małe prace domowe można zdobyć maksymalnie 10-15 punktów, jednak ostateczna liczba przyznanych punktów studenta wynosi:&lt;/p&gt;

&lt;pre&gt;Math.min(student.zdobytePkt(), 10);&lt;/pre&gt;

&lt;p&gt;Bieżące wyniki:&lt;/p&gt;

&lt;table&gt;
                &lt;tr&gt;&lt;th&gt;ID&lt;/th&gt;&lt;th&gt;KARTY&lt;/th&gt;   &lt;th&gt;UŁAMEK&lt;/th&gt; &lt;th&gt;SITO&lt;/th&gt;&lt;th&gt;SKLEP&lt;/th&gt; &lt;th&gt;JavaVS..&lt;/th&gt; &lt;th&gt;Logic&lt;/th&gt; &lt;th&gt;Sklep2&lt;/th&gt;&lt;/tr&gt;           
&lt;!-- MB --&gt;     &lt;tr&gt;&lt;td&gt;385247&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1,9&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;1&lt;/td&gt;    &lt;td&gt;2&lt;/td&gt;      &lt;/tr&gt;               &lt;!-- nie mogę kupić małą literą. --&gt;                
&lt;!-- PB --&gt;     &lt;tr&gt;&lt;td&gt;385254&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;2&lt;/td&gt;      &lt;/tr&gt;               &lt;!-- metoda &#39;run&#39; mogłaby być krutsza (3x) --&gt;
&lt;!-- MD --&gt;     &lt;tr&gt;&lt;td&gt;372285&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1,7&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;1&lt;/td&gt;      &lt;/tr&gt;       &lt;!-- _ zamiast spacji, inna specyfikacja wejścia, po wpisaniu end - wychodzi --&gt;
&lt;!-- MF --&gt;     &lt;tr&gt;&lt;td&gt;385423&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1,9&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;1&lt;/td&gt;    &lt;td&gt;?&lt;/td&gt;      &lt;/tr&gt;               &lt;!-- nie można kupić małą literą, za mało muwiące komunikaty --&gt;
&lt;!-- JK --&gt;     &lt;tr&gt;&lt;td&gt;359784&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;  &lt;td&gt;0&lt;/td&gt;        &lt;td&gt;0&lt;/td&gt;        &lt;td&gt;?&lt;/td&gt;      &lt;/tr&gt;               
&lt;!-- KK --&gt;     &lt;tr&gt;&lt;td&gt;385830&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1,9&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;1&lt;/td&gt;    &lt;td&gt;?&lt;/td&gt;      &lt;/tr&gt;               &lt;!-- nie akceptuje małą literą, Obszedłeś contains, ale straciłeś wielkie litery :) --&gt;

&lt;!-- PK --&gt;     &lt;tr&gt;&lt;td&gt;371141&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;  &lt;td&gt;0&lt;/td&gt;        &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;2&lt;/td&gt;      &lt;/tr&gt;                       &lt;!-- RAR! --&gt;
&lt;!-- VK --&gt;     &lt;tr&gt;&lt;td&gt;372360&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1,7&lt;/td&gt;    &lt;td&gt;0&lt;/td&gt;        &lt;td&gt;1&lt;/td&gt;    &lt;td&gt;1,5&lt;/td&gt;        &lt;/tr&gt;               &lt;!-- akceptuje produkty tylko małą literą. Nie wiadomo, czy udało się kupić czy nie (przydały by się lepsze komentarze. Można kupić ułamek mleka :D, Twoje rozwiązanie nie jest obiektowe --&gt;
&lt;!-- PM --&gt;     &lt;tr&gt;&lt;td&gt;385901&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;?&lt;/td&gt;      &lt;/tr&gt;               
&lt;!-- AR --&gt;     &lt;tr&gt;&lt;td&gt;360949&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;2&lt;/td&gt;      &lt;/tr&gt;               &lt;!--  --&gt;               
&lt;!-- RŚ --&gt;     &lt;tr&gt;&lt;td&gt;322227&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;td&gt;1,7&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt;        &lt;td&gt;0&lt;/td&gt;        &lt;td&gt;1,9&lt;/td&gt;        &lt;/tr&gt;       &lt;!-- termin!, dostawca wielką literą! --&gt;       
&lt;!-- PT --&gt;     &lt;tr&gt;&lt;td&gt;347283&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;  &lt;td&gt;0&lt;/td&gt;        &lt;td&gt;0&lt;/td&gt;        &lt;td&gt;?&lt;/td&gt;      &lt;/tr&gt;               

&lt;!-- KW --&gt;     &lt;tr&gt;&lt;td&gt;373379&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;   &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;0&lt;/td&gt;      &lt;/tr&gt;               
&lt;/table&gt;
</description>
    </item>
    
  </channel>
</rss>
